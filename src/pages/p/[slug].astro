---
// ! throw an error if I have notes instead of blockNotes

import fetchApi from "../../lib/strapi";
import type Plan from "../../interfaces/plan";
import Canvas from "../../components/canvas";
import Layout from "../../layouts/Layout.astro";

export async function getStaticPaths() {
  const plans = await fetchApi<Plan[]>({
    endpoint: "plans",
    wrappedByKey: "data",
    fields: ["areas", "notes"],
  });

  return plans.map((plan) => ({
    params: { slug: plan.attributes.slug },
    props: plan,
  }));
}
type Props = Plan;

const plan = Astro.props;
import SuperSimple from "../../components/super-simple";

const createdAtDate = new Date(plan.attributes.createdAt).toLocaleDateString();
const updatedAtDate = plan.attributes.updatedAt
  ? new Date(plan.attributes.updatedAt).toLocaleDateString()
  : null;
---

<Layout>
  {
    plan.attributes.notes ? (
      <p class="everest error">There are Notes instead of Block Notes</p>
    ) : null
  }

  <h1>{plan.attributes.name}</h1>

  <address class="capitalize">
    <span class="kilimanjaro">{plan.attributes.address}</span><br />
    {
      plan.attributes?.areas?.data[0]?.attributes?.name ??
        "No area name available"
    },
    {
      plan.attributes?.areas?.data[0]?.attributes?.state ?? "No state available"
    }, {plan.attributes.zip}
  </address>

  <hr />

  <div class="deck">
    <p class="plan-detail">
      <span class="eyebrow">Jobber install</span>
      <span class="supra"
        >{
          plan.attributes.jobber
            ? plan.attributes.jobber
            : '<span class="error">Missing Jobber</span>'
        }</span
      >
    </p>
    <p class="plan-detail">
      <span class="eyebrow">Jobber takedown</span>
      <span class="supra"
        >{
          plan.attributes.jobbertakedown
            ? plan.attributes.jobbertakedown
            : '<span class="error">Missing Jobber Takedown</span>'
        }</span
      >
    </p>
  </div>

  <hr />

  {
    plan.attributes.timerHours ? (
      <p class="plan-detail">
        <span class="eyebrow">Timer</span>
        <span class="supra">{plan.attributes.timerHours} Hours</span>
      </p>
    ) : null
  }

  {
    plan.attributes.timerFallback ? (
      <p class="plan-detail">
        <span class="eyebrow">Timer</span>
        <span class="supra">{plan.attributes.timerFallback}</span>
      </p>
    ) : null
  }

  {
    plan.attributes.basicNotes ? (
      <>
        <h2>Basic Notes</h2>
        <pre>{plan.attributes.basicNotes}</pre>
      </>
    ) : null
  }

  <!-- ! needs styling currently list is removed -->
  <!-- the notes had to be reformatted due to how astro deals with markdown -->
  <!-- <section class="blocks-renderer">
    {
      plan.attributes.blockNotes ? (
        <BlocksRenderer content={plan.attributes.blockNotes} />
      ) : (
        <p>No Block Notes</p>
      )
    }
  </section> -->

  {
    plan.attributes.notes ? (
      <>
        <h2>Old Notes</h2>
        {plan.attributes.notes}
      </>
    ) : null
  }

  <!-- TODO: rename -->
  <Canvas
    planAttributes={plan.attributes}
    createdAtDate={createdAtDate}
    updatedAtDate={updatedAtDate}
    client:load
  />

  <!-- <SuperSimple client:load /> -->

  <div class="deck">
    <p class="plan-detail">
      <span class="eyebrow">Created at</span>
      <span class="supra">{createdAtDate}</span>
    </p>
    <p class="plan-detail">
      <span class="eyebrow">Updated at</span>
      <span class="supra"> {updatedAtDate}</span>
    </p>
  </div>

  <!-- http://45.79.101.19:1340/api/plans?populate[areas]=true -->
  <!-- http://45.79.101.19:1340/api/plans?populate[areas]=true&[notes]=true -->
</Layout>
